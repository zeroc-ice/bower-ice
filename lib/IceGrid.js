(function()
{
    var __root = typeof(window) !== "undefined" ? window : self;
    __root.IceGrid = __root.IceGrid || {};
    var Slice = Ice.Slice;

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `Descriptor.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
            Slice.defineDictionary(IceGrid, "StringStringDict", "StringStringDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);
        
            /**
             * Property descriptor.
             * 
             **/
            IceGrid.PropertyDescriptor = Slice.defineStruct(
                function(name, value)
                {
                    this.name = name !== undefined ? name : "";
                    this.value = value !== undefined ? value : "";
                },
                true,
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeString(this.value);
                },
                function(__is)
                {
                    this.name = __is.readString();
                    this.value = __is.readString();
                },
                2, 
                false);
            Slice.defineSequence(IceGrid, "PropertyDescriptorSeqHelper", "IceGrid.PropertyDescriptor", false);
        
            /**
             * A property set descriptor.
             * 
             **/
            IceGrid.PropertySetDescriptor = Slice.defineStruct(
                function(references, properties)
                {
                    this.references = references !== undefined ? references : null;
                    this.properties = properties !== undefined ? properties : null;
                },
                true,
                function(__os)
                {
                    Ice.StringSeqHelper.write(__os, this.references);
                    IceGrid.PropertyDescriptorSeqHelper.write(__os, this.properties);
                },
                function(__is)
                {
                    this.references = Ice.StringSeqHelper.read(__is);
                    this.properties = IceGrid.PropertyDescriptorSeqHelper.read(__is);
                },
                2, 
                false);
            Slice.defineDictionary(IceGrid, "PropertySetDescriptorDict", "PropertySetDescriptorDictHelper", "Ice.StringHelper", "IceGrid.PropertySetDescriptor", false, undefined, undefined, Ice.HashMap.compareEquals);
        
            /**
             * An Ice object descriptor.
             * 
             **/
            IceGrid.ObjectDescriptor = Slice.defineStruct(
                function(id, type, proxyOptions)
                {
                    this.id = id !== undefined ? id : new Ice.Identity();
                    this.type = type !== undefined ? type : "";
                    this.proxyOptions = proxyOptions !== undefined ? proxyOptions : "";
                },
                true,
                function(__os)
                {
                    Ice.Identity.write(__os, this.id);
                    __os.writeString(this.type);
                    __os.writeString(this.proxyOptions);
                },
                function(__is)
                {
                    this.id = Ice.Identity.read(__is, this.id);
                    this.type = __is.readString();
                    this.proxyOptions = __is.readString();
                },
                4, 
                false);
            Slice.defineSequence(IceGrid, "ObjectDescriptorSeqHelper", "IceGrid.ObjectDescriptor", false);
        
            /**
             * An Ice object adapter descriptor.
             * 
             **/
            IceGrid.AdapterDescriptor = Slice.defineStruct(
                function(name, description, id, replicaGroupId, priority, registerProcess, serverLifetime, objects, allocatables)
                {
                    this.name = name !== undefined ? name : "";
                    this.description = description !== undefined ? description : "";
                    this.id = id !== undefined ? id : "";
                    this.replicaGroupId = replicaGroupId !== undefined ? replicaGroupId : "";
                    this.priority = priority !== undefined ? priority : "";
                    this.registerProcess = registerProcess !== undefined ? registerProcess : false;
                    this.serverLifetime = serverLifetime !== undefined ? serverLifetime : false;
                    this.objects = objects !== undefined ? objects : null;
                    this.allocatables = allocatables !== undefined ? allocatables : null;
                },
                true,
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeString(this.description);
                    __os.writeString(this.id);
                    __os.writeString(this.replicaGroupId);
                    __os.writeString(this.priority);
                    __os.writeBool(this.registerProcess);
                    __os.writeBool(this.serverLifetime);
                    IceGrid.ObjectDescriptorSeqHelper.write(__os, this.objects);
                    IceGrid.ObjectDescriptorSeqHelper.write(__os, this.allocatables);
                },
                function(__is)
                {
                    this.name = __is.readString();
                    this.description = __is.readString();
                    this.id = __is.readString();
                    this.replicaGroupId = __is.readString();
                    this.priority = __is.readString();
                    this.registerProcess = __is.readBool();
                    this.serverLifetime = __is.readBool();
                    this.objects = IceGrid.ObjectDescriptorSeqHelper.read(__is);
                    this.allocatables = IceGrid.ObjectDescriptorSeqHelper.read(__is);
                },
                9, 
                false);
            Slice.defineSequence(IceGrid, "AdapterDescriptorSeqHelper", "IceGrid.AdapterDescriptor", false);
        
            /**
             * A Freeze database environment descriptor.
             * 
             **/
            IceGrid.DbEnvDescriptor = Slice.defineStruct(
                function(name, description, dbHome, properties)
                {
                    this.name = name !== undefined ? name : "";
                    this.description = description !== undefined ? description : "";
                    this.dbHome = dbHome !== undefined ? dbHome : "";
                    this.properties = properties !== undefined ? properties : null;
                },
                true,
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeString(this.description);
                    __os.writeString(this.dbHome);
                    IceGrid.PropertyDescriptorSeqHelper.write(__os, this.properties);
                },
                function(__is)
                {
                    this.name = __is.readString();
                    this.description = __is.readString();
                    this.dbHome = __is.readString();
                    this.properties = IceGrid.PropertyDescriptorSeqHelper.read(__is);
                },
                4, 
                false);
            Slice.defineSequence(IceGrid, "DbEnvDescriptorSeqHelper", "IceGrid.DbEnvDescriptor", false);
        
            /**
             * A communicator descriptor.
             * 
             **/
            IceGrid.CommunicatorDescriptor = Slice.defineObject(
                function(adapters, propertySet, dbEnvs, logs, description)
                {
                    Ice.Object.call(this);
                    this.adapters = adapters !== undefined ? adapters : null;
                    this.propertySet = propertySet !== undefined ? propertySet : new IceGrid.PropertySetDescriptor();
                    this.dbEnvs = dbEnvs !== undefined ? dbEnvs : null;
                    this.logs = logs !== undefined ? logs : null;
                    this.description = description !== undefined ? description : "";
                },
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::CommunicatorDescriptor"
                ],
                -1,
                function(__os)
                {
                    IceGrid.AdapterDescriptorSeqHelper.write(__os, this.adapters);
                    IceGrid.PropertySetDescriptor.write(__os, this.propertySet);
                    IceGrid.DbEnvDescriptorSeqHelper.write(__os, this.dbEnvs);
                    Ice.StringSeqHelper.write(__os, this.logs);
                    __os.writeString(this.description);
                },
                function(__is)
                {
                    this.adapters = IceGrid.AdapterDescriptorSeqHelper.read(__is);
                    this.propertySet = IceGrid.PropertySetDescriptor.read(__is, this.propertySet);
                    this.dbEnvs = IceGrid.DbEnvDescriptorSeqHelper.read(__is);
                    this.logs = Ice.StringSeqHelper.read(__is);
                    this.description = __is.readString();
                },
                false);
        
            IceGrid.CommunicatorDescriptorPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.CommunicatorDescriptor.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.CommunicatorDescriptor, IceGrid.CommunicatorDescriptorPrx);
        
            /**
             * A distribution descriptor defines an IcePatch2 server and the
             * directories to retrieve from the patch server.
             * 
             **/
            IceGrid.DistributionDescriptor = Slice.defineStruct(
                function(icepatch, directories)
                {
                    this.icepatch = icepatch !== undefined ? icepatch : "";
                    this.directories = directories !== undefined ? directories : null;
                },
                true,
                function(__os)
                {
                    __os.writeString(this.icepatch);
                    Ice.StringSeqHelper.write(__os, this.directories);
                },
                function(__is)
                {
                    this.icepatch = __is.readString();
                    this.directories = Ice.StringSeqHelper.read(__is);
                },
                2, 
                false);
        
            /**
             * An Ice server descriptor.
             * 
             **/
            IceGrid.ServerDescriptor = Slice.defineObject(
                function(adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user)
                {
                    IceGrid.CommunicatorDescriptor.call(this, adapters, propertySet, dbEnvs, logs, description);
                    this.id = id !== undefined ? id : "";
                    this.exe = exe !== undefined ? exe : "";
                    this.iceVersion = iceVersion !== undefined ? iceVersion : "";
                    this.pwd = pwd !== undefined ? pwd : "";
                    this.options = options !== undefined ? options : null;
                    this.envs = envs !== undefined ? envs : null;
                    this.activation = activation !== undefined ? activation : "";
                    this.activationTimeout = activationTimeout !== undefined ? activationTimeout : "";
                    this.deactivationTimeout = deactivationTimeout !== undefined ? deactivationTimeout : "";
                    this.applicationDistrib = applicationDistrib !== undefined ? applicationDistrib : false;
                    this.distrib = distrib !== undefined ? distrib : new IceGrid.DistributionDescriptor();
                    this.allocatable = allocatable !== undefined ? allocatable : false;
                    this.user = user !== undefined ? user : "";
                },
                IceGrid.CommunicatorDescriptor, undefined, 2,
                [
                    "::Ice::Object",
                    "::IceGrid::CommunicatorDescriptor",
                    "::IceGrid::ServerDescriptor"
                ],
                -1,
                function(__os)
                {
                    __os.writeString(this.id);
                    __os.writeString(this.exe);
                    __os.writeString(this.iceVersion);
                    __os.writeString(this.pwd);
                    Ice.StringSeqHelper.write(__os, this.options);
                    Ice.StringSeqHelper.write(__os, this.envs);
                    __os.writeString(this.activation);
                    __os.writeString(this.activationTimeout);
                    __os.writeString(this.deactivationTimeout);
                    __os.writeBool(this.applicationDistrib);
                    IceGrid.DistributionDescriptor.write(__os, this.distrib);
                    __os.writeBool(this.allocatable);
                    __os.writeString(this.user);
                },
                function(__is)
                {
                    this.id = __is.readString();
                    this.exe = __is.readString();
                    this.iceVersion = __is.readString();
                    this.pwd = __is.readString();
                    this.options = Ice.StringSeqHelper.read(__is);
                    this.envs = Ice.StringSeqHelper.read(__is);
                    this.activation = __is.readString();
                    this.activationTimeout = __is.readString();
                    this.deactivationTimeout = __is.readString();
                    this.applicationDistrib = __is.readBool();
                    this.distrib = IceGrid.DistributionDescriptor.read(__is, this.distrib);
                    this.allocatable = __is.readBool();
                    this.user = __is.readString();
                },
                false);
        
            IceGrid.ServerDescriptorPrx = Slice.defineProxy(IceGrid.CommunicatorDescriptorPrx, IceGrid.ServerDescriptor.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.ServerDescriptor, IceGrid.ServerDescriptorPrx);
            Slice.defineSequence(IceGrid, "ServerDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServerDescriptor");
        
            /**
             * An IceBox service descriptor.
             * 
             **/
            IceGrid.ServiceDescriptor = Slice.defineObject(
                function(adapters, propertySet, dbEnvs, logs, description, name, entry)
                {
                    IceGrid.CommunicatorDescriptor.call(this, adapters, propertySet, dbEnvs, logs, description);
                    this.name = name !== undefined ? name : "";
                    this.entry = entry !== undefined ? entry : "";
                },
                IceGrid.CommunicatorDescriptor, undefined, 2,
                [
                    "::Ice::Object",
                    "::IceGrid::CommunicatorDescriptor",
                    "::IceGrid::ServiceDescriptor"
                ],
                -1,
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeString(this.entry);
                },
                function(__is)
                {
                    this.name = __is.readString();
                    this.entry = __is.readString();
                },
                false);
        
            IceGrid.ServiceDescriptorPrx = Slice.defineProxy(IceGrid.CommunicatorDescriptorPrx, IceGrid.ServiceDescriptor.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.ServiceDescriptor, IceGrid.ServiceDescriptorPrx);
            Slice.defineSequence(IceGrid, "ServiceDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServiceDescriptor");
        
            /**
             * A server template instance descriptor.
             * 
             **/
            IceGrid.ServerInstanceDescriptor = Slice.defineStruct(
                function(template, parameterValues, propertySet, servicePropertySets)
                {
                    this.template = template !== undefined ? template : "";
                    this.parameterValues = parameterValues !== undefined ? parameterValues : null;
                    this.propertySet = propertySet !== undefined ? propertySet : new IceGrid.PropertySetDescriptor();
                    this.servicePropertySets = servicePropertySets !== undefined ? servicePropertySets : null;
                },
                false,
                function(__os)
                {
                    __os.writeString(this.template);
                    IceGrid.StringStringDictHelper.write(__os, this.parameterValues);
                    IceGrid.PropertySetDescriptor.write(__os, this.propertySet);
                    IceGrid.PropertySetDescriptorDictHelper.write(__os, this.servicePropertySets);
                },
                function(__is)
                {
                    this.template = __is.readString();
                    this.parameterValues = IceGrid.StringStringDictHelper.read(__is);
                    this.propertySet = IceGrid.PropertySetDescriptor.read(__is, this.propertySet);
                    this.servicePropertySets = IceGrid.PropertySetDescriptorDictHelper.read(__is);
                },
                5, 
                false);
            Slice.defineSequence(IceGrid, "ServerInstanceDescriptorSeqHelper", "IceGrid.ServerInstanceDescriptor", false);
        
            /**
             * A template descriptor for server or service templates.
             * 
             **/
            IceGrid.TemplateDescriptor = Slice.defineStruct(
                function(descriptor, parameters, parameterDefaults)
                {
                    this.descriptor = descriptor !== undefined ? descriptor : null;
                    this.parameters = parameters !== undefined ? parameters : null;
                    this.parameterDefaults = parameterDefaults !== undefined ? parameterDefaults : null;
                },
                false,
                function(__os)
                {
                    __os.writeObject(this.descriptor);
                    Ice.StringSeqHelper.write(__os, this.parameters);
                    IceGrid.StringStringDictHelper.write(__os, this.parameterDefaults);
                },
                function(__is)
                {
                    var self = this;
                    __is.readObject(function(__o){ self.descriptor = __o; }, IceGrid.CommunicatorDescriptor);
                    this.parameters = Ice.StringSeqHelper.read(__is);
                    this.parameterDefaults = IceGrid.StringStringDictHelper.read(__is);
                },
                3, 
                false);
            Slice.defineDictionary(IceGrid, "TemplateDescriptorDict", "TemplateDescriptorDictHelper", "Ice.StringHelper", "IceGrid.TemplateDescriptor", false, undefined, undefined, Ice.HashMap.compareEquals);
        
            /**
             * A service template instance descriptor.
             * 
             **/
            IceGrid.ServiceInstanceDescriptor = Slice.defineStruct(
                function(template, parameterValues, descriptor, propertySet)
                {
                    this.template = template !== undefined ? template : "";
                    this.parameterValues = parameterValues !== undefined ? parameterValues : null;
                    this.descriptor = descriptor !== undefined ? descriptor : null;
                    this.propertySet = propertySet !== undefined ? propertySet : new IceGrid.PropertySetDescriptor();
                },
                false,
                function(__os)
                {
                    __os.writeString(this.template);
                    IceGrid.StringStringDictHelper.write(__os, this.parameterValues);
                    __os.writeObject(this.descriptor);
                    IceGrid.PropertySetDescriptor.write(__os, this.propertySet);
                },
                function(__is)
                {
                    var self = this;
                    this.template = __is.readString();
                    this.parameterValues = IceGrid.StringStringDictHelper.read(__is);
                    __is.readObject(function(__o){ self.descriptor = __o; }, IceGrid.ServiceDescriptor);
                    this.propertySet = IceGrid.PropertySetDescriptor.read(__is, this.propertySet);
                },
                5, 
                false);
            Slice.defineSequence(IceGrid, "ServiceInstanceDescriptorSeqHelper", "IceGrid.ServiceInstanceDescriptor", false);
        
            /**
             * An IceBox server descriptor.
             * 
             **/
            IceGrid.IceBoxDescriptor = Slice.defineObject(
                function(adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user, services)
                {
                    IceGrid.ServerDescriptor.call(this, adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user);
                    this.services = services !== undefined ? services : null;
                },
                IceGrid.ServerDescriptor, undefined, 2,
                [
                    "::Ice::Object",
                    "::IceGrid::CommunicatorDescriptor",
                    "::IceGrid::IceBoxDescriptor",
                    "::IceGrid::ServerDescriptor"
                ],
                -1,
                function(__os)
                {
                    IceGrid.ServiceInstanceDescriptorSeqHelper.write(__os, this.services);
                },
                function(__is)
                {
                    this.services = IceGrid.ServiceInstanceDescriptorSeqHelper.read(__is);
                },
                false);
        
            IceGrid.IceBoxDescriptorPrx = Slice.defineProxy(IceGrid.ServerDescriptorPrx, IceGrid.IceBoxDescriptor.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.IceBoxDescriptor, IceGrid.IceBoxDescriptorPrx);
        
            /**
             * A node descriptor.
             * 
             **/
            IceGrid.NodeDescriptor = Slice.defineStruct(
                function(variables, serverInstances, servers, loadFactor, description, propertySets)
                {
                    this.variables = variables !== undefined ? variables : null;
                    this.serverInstances = serverInstances !== undefined ? serverInstances : null;
                    this.servers = servers !== undefined ? servers : null;
                    this.loadFactor = loadFactor !== undefined ? loadFactor : "";
                    this.description = description !== undefined ? description : "";
                    this.propertySets = propertySets !== undefined ? propertySets : null;
                },
                false,
                function(__os)
                {
                    IceGrid.StringStringDictHelper.write(__os, this.variables);
                    IceGrid.ServerInstanceDescriptorSeqHelper.write(__os, this.serverInstances);
                    IceGrid.ServerDescriptorSeqHelper.write(__os, this.servers);
                    __os.writeString(this.loadFactor);
                    __os.writeString(this.description);
                    IceGrid.PropertySetDescriptorDictHelper.write(__os, this.propertySets);
                },
                function(__is)
                {
                    this.variables = IceGrid.StringStringDictHelper.read(__is);
                    this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(__is);
                    this.servers = IceGrid.ServerDescriptorSeqHelper.read(__is);
                    this.loadFactor = __is.readString();
                    this.description = __is.readString();
                    this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(__is);
                },
                6, 
                false);
            Slice.defineDictionary(IceGrid, "NodeDescriptorDict", "NodeDescriptorDictHelper", "Ice.StringHelper", "IceGrid.NodeDescriptor", false, undefined, undefined, Ice.HashMap.compareEquals);
        
            /**
             * A base class for load balancing policies.
             * 
             **/
            IceGrid.LoadBalancingPolicy = Slice.defineObject(
                function(nReplicas)
                {
                    Ice.Object.call(this);
                    this.nReplicas = nReplicas !== undefined ? nReplicas : "";
                },
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::LoadBalancingPolicy"
                ],
                -1,
                function(__os)
                {
                    __os.writeString(this.nReplicas);
                },
                function(__is)
                {
                    this.nReplicas = __is.readString();
                },
                false);
        
            IceGrid.LoadBalancingPolicyPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.LoadBalancingPolicy.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.LoadBalancingPolicy, IceGrid.LoadBalancingPolicyPrx);
        
            /**
             * Random load balancing policy.
             * 
             **/
            IceGrid.RandomLoadBalancingPolicy = Slice.defineObject(
                function(nReplicas)
                {
                    IceGrid.LoadBalancingPolicy.call(this, nReplicas);
                },
                IceGrid.LoadBalancingPolicy, undefined, 2,
                [
                    "::Ice::Object",
                    "::IceGrid::LoadBalancingPolicy",
                    "::IceGrid::RandomLoadBalancingPolicy"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.RandomLoadBalancingPolicyPrx = Slice.defineProxy(IceGrid.LoadBalancingPolicyPrx, IceGrid.RandomLoadBalancingPolicy.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.RandomLoadBalancingPolicy, IceGrid.RandomLoadBalancingPolicyPrx);
        
            /**
             * Ordered load balancing policy.
             * 
             **/
            IceGrid.OrderedLoadBalancingPolicy = Slice.defineObject(
                function(nReplicas)
                {
                    IceGrid.LoadBalancingPolicy.call(this, nReplicas);
                },
                IceGrid.LoadBalancingPolicy, undefined, 2,
                [
                    "::Ice::Object",
                    "::IceGrid::LoadBalancingPolicy",
                    "::IceGrid::OrderedLoadBalancingPolicy"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.OrderedLoadBalancingPolicyPrx = Slice.defineProxy(IceGrid.LoadBalancingPolicyPrx, IceGrid.OrderedLoadBalancingPolicy.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.OrderedLoadBalancingPolicy, IceGrid.OrderedLoadBalancingPolicyPrx);
        
            /**
             * Round robin load balancing policy.
             * 
             **/
            IceGrid.RoundRobinLoadBalancingPolicy = Slice.defineObject(
                function(nReplicas)
                {
                    IceGrid.LoadBalancingPolicy.call(this, nReplicas);
                },
                IceGrid.LoadBalancingPolicy, undefined, 2,
                [
                    "::Ice::Object",
                    "::IceGrid::LoadBalancingPolicy",
                    "::IceGrid::RoundRobinLoadBalancingPolicy"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.RoundRobinLoadBalancingPolicyPrx = Slice.defineProxy(IceGrid.LoadBalancingPolicyPrx, IceGrid.RoundRobinLoadBalancingPolicy.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.RoundRobinLoadBalancingPolicy, IceGrid.RoundRobinLoadBalancingPolicyPrx);
        
            /**
             * Adaptive load balancing policy.
             * 
             **/
            IceGrid.AdaptiveLoadBalancingPolicy = Slice.defineObject(
                function(nReplicas, loadSample)
                {
                    IceGrid.LoadBalancingPolicy.call(this, nReplicas);
                    this.loadSample = loadSample !== undefined ? loadSample : "";
                },
                IceGrid.LoadBalancingPolicy, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::AdaptiveLoadBalancingPolicy",
                    "::IceGrid::LoadBalancingPolicy"
                ],
                -1,
                function(__os)
                {
                    __os.writeString(this.loadSample);
                },
                function(__is)
                {
                    this.loadSample = __is.readString();
                },
                false);
        
            IceGrid.AdaptiveLoadBalancingPolicyPrx = Slice.defineProxy(IceGrid.LoadBalancingPolicyPrx, IceGrid.AdaptiveLoadBalancingPolicy.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.AdaptiveLoadBalancingPolicy, IceGrid.AdaptiveLoadBalancingPolicyPrx);
        
            /**
             * A replica group descriptor.
             * 
             **/
            IceGrid.ReplicaGroupDescriptor = Slice.defineStruct(
                function(id, loadBalancing, proxyOptions, objects, description, filter)
                {
                    this.id = id !== undefined ? id : "";
                    this.loadBalancing = loadBalancing !== undefined ? loadBalancing : null;
                    this.proxyOptions = proxyOptions !== undefined ? proxyOptions : "";
                    this.objects = objects !== undefined ? objects : null;
                    this.description = description !== undefined ? description : "";
                    this.filter = filter !== undefined ? filter : "";
                },
                false,
                function(__os)
                {
                    __os.writeString(this.id);
                    __os.writeObject(this.loadBalancing);
                    __os.writeString(this.proxyOptions);
                    IceGrid.ObjectDescriptorSeqHelper.write(__os, this.objects);
                    __os.writeString(this.description);
                    __os.writeString(this.filter);
                },
                function(__is)
                {
                    var self = this;
                    this.id = __is.readString();
                    __is.readObject(function(__o){ self.loadBalancing = __o; }, IceGrid.LoadBalancingPolicy);
                    this.proxyOptions = __is.readString();
                    this.objects = IceGrid.ObjectDescriptorSeqHelper.read(__is);
                    this.description = __is.readString();
                    this.filter = __is.readString();
                },
                6, 
                false);
            Slice.defineSequence(IceGrid, "ReplicaGroupDescriptorSeqHelper", "IceGrid.ReplicaGroupDescriptor", false);
        
            /**
             * An application descriptor.
             * 
             **/
            IceGrid.ApplicationDescriptor = Slice.defineStruct(
                function(name, variables, replicaGroups, serverTemplates, serviceTemplates, nodes, distrib, description, propertySets)
                {
                    this.name = name !== undefined ? name : "";
                    this.variables = variables !== undefined ? variables : null;
                    this.replicaGroups = replicaGroups !== undefined ? replicaGroups : null;
                    this.serverTemplates = serverTemplates !== undefined ? serverTemplates : null;
                    this.serviceTemplates = serviceTemplates !== undefined ? serviceTemplates : null;
                    this.nodes = nodes !== undefined ? nodes : null;
                    this.distrib = distrib !== undefined ? distrib : new IceGrid.DistributionDescriptor();
                    this.description = description !== undefined ? description : "";
                    this.propertySets = propertySets !== undefined ? propertySets : null;
                },
                false,
                function(__os)
                {
                    __os.writeString(this.name);
                    IceGrid.StringStringDictHelper.write(__os, this.variables);
                    IceGrid.ReplicaGroupDescriptorSeqHelper.write(__os, this.replicaGroups);
                    IceGrid.TemplateDescriptorDictHelper.write(__os, this.serverTemplates);
                    IceGrid.TemplateDescriptorDictHelper.write(__os, this.serviceTemplates);
                    IceGrid.NodeDescriptorDictHelper.write(__os, this.nodes);
                    IceGrid.DistributionDescriptor.write(__os, this.distrib);
                    __os.writeString(this.description);
                    IceGrid.PropertySetDescriptorDictHelper.write(__os, this.propertySets);
                },
                function(__is)
                {
                    this.name = __is.readString();
                    this.variables = IceGrid.StringStringDictHelper.read(__is);
                    this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(__is);
                    this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(__is);
                    this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(__is);
                    this.nodes = IceGrid.NodeDescriptorDictHelper.read(__is);
                    this.distrib = IceGrid.DistributionDescriptor.read(__is, this.distrib);
                    this.description = __is.readString();
                    this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(__is);
                },
                10, 
                false);
            Slice.defineSequence(IceGrid, "ApplicationDescriptorSeqHelper", "IceGrid.ApplicationDescriptor", false);
        
            /**
             * A "boxed" string.
             * 
             **/
            IceGrid.BoxedString = Slice.defineObject(
                function(value)
                {
                    Ice.Object.call(this);
                    this.value = value !== undefined ? value : "";
                },
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::BoxedString"
                ],
                -1,
                function(__os)
                {
                    __os.writeString(this.value);
                },
                function(__is)
                {
                    this.value = __is.readString();
                },
                false);
        
            IceGrid.BoxedStringPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.BoxedString.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.BoxedString, IceGrid.BoxedStringPrx);
        
            /**
             * A node update descriptor to describe the updates to apply to a
             * node of a deployed application.
             * 
             **/
            IceGrid.NodeUpdateDescriptor = Slice.defineStruct(
                function(name, description, variables, removeVariables, propertySets, removePropertySets, serverInstances, servers, removeServers, loadFactor)
                {
                    this.name = name !== undefined ? name : "";
                    this.description = description !== undefined ? description : null;
                    this.variables = variables !== undefined ? variables : null;
                    this.removeVariables = removeVariables !== undefined ? removeVariables : null;
                    this.propertySets = propertySets !== undefined ? propertySets : null;
                    this.removePropertySets = removePropertySets !== undefined ? removePropertySets : null;
                    this.serverInstances = serverInstances !== undefined ? serverInstances : null;
                    this.servers = servers !== undefined ? servers : null;
                    this.removeServers = removeServers !== undefined ? removeServers : null;
                    this.loadFactor = loadFactor !== undefined ? loadFactor : null;
                },
                false,
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeObject(this.description);
                    IceGrid.StringStringDictHelper.write(__os, this.variables);
                    Ice.StringSeqHelper.write(__os, this.removeVariables);
                    IceGrid.PropertySetDescriptorDictHelper.write(__os, this.propertySets);
                    Ice.StringSeqHelper.write(__os, this.removePropertySets);
                    IceGrid.ServerInstanceDescriptorSeqHelper.write(__os, this.serverInstances);
                    IceGrid.ServerDescriptorSeqHelper.write(__os, this.servers);
                    Ice.StringSeqHelper.write(__os, this.removeServers);
                    __os.writeObject(this.loadFactor);
                },
                function(__is)
                {
                    var self = this;
                    this.name = __is.readString();
                    __is.readObject(function(__o){ self.description = __o; }, IceGrid.BoxedString);
                    this.variables = IceGrid.StringStringDictHelper.read(__is);
                    this.removeVariables = Ice.StringSeqHelper.read(__is);
                    this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(__is);
                    this.removePropertySets = Ice.StringSeqHelper.read(__is);
                    this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(__is);
                    this.servers = IceGrid.ServerDescriptorSeqHelper.read(__is);
                    this.removeServers = Ice.StringSeqHelper.read(__is);
                    __is.readObject(function(__o){ self.loadFactor = __o; }, IceGrid.BoxedString);
                },
                10, 
                false);
            Slice.defineSequence(IceGrid, "NodeUpdateDescriptorSeqHelper", "IceGrid.NodeUpdateDescriptor", false);
        
            /**
             * A "boxed" distribution descriptor.
             * 
             **/
            IceGrid.BoxedDistributionDescriptor = Slice.defineObject(
                function(value)
                {
                    Ice.Object.call(this);
                    this.value = value !== undefined ? value : new IceGrid.DistributionDescriptor();
                },
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::BoxedDistributionDescriptor"
                ],
                -1,
                function(__os)
                {
                    IceGrid.DistributionDescriptor.write(__os, this.value);
                },
                function(__is)
                {
                    this.value = IceGrid.DistributionDescriptor.read(__is, this.value);
                },
                false);
        
            IceGrid.BoxedDistributionDescriptorPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.BoxedDistributionDescriptor.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.BoxedDistributionDescriptor, IceGrid.BoxedDistributionDescriptorPrx);
        
            /**
             * An application update descriptor to describe the updates to apply
             * to a deployed application.
             * 
             **/
            IceGrid.ApplicationUpdateDescriptor = Slice.defineStruct(
                function(name, description, distrib, variables, removeVariables, propertySets, removePropertySets, replicaGroups, removeReplicaGroups, serverTemplates, removeServerTemplates, serviceTemplates, removeServiceTemplates, nodes, removeNodes)
                {
                    this.name = name !== undefined ? name : "";
                    this.description = description !== undefined ? description : null;
                    this.distrib = distrib !== undefined ? distrib : null;
                    this.variables = variables !== undefined ? variables : null;
                    this.removeVariables = removeVariables !== undefined ? removeVariables : null;
                    this.propertySets = propertySets !== undefined ? propertySets : null;
                    this.removePropertySets = removePropertySets !== undefined ? removePropertySets : null;
                    this.replicaGroups = replicaGroups !== undefined ? replicaGroups : null;
                    this.removeReplicaGroups = removeReplicaGroups !== undefined ? removeReplicaGroups : null;
                    this.serverTemplates = serverTemplates !== undefined ? serverTemplates : null;
                    this.removeServerTemplates = removeServerTemplates !== undefined ? removeServerTemplates : null;
                    this.serviceTemplates = serviceTemplates !== undefined ? serviceTemplates : null;
                    this.removeServiceTemplates = removeServiceTemplates !== undefined ? removeServiceTemplates : null;
                    this.nodes = nodes !== undefined ? nodes : null;
                    this.removeNodes = removeNodes !== undefined ? removeNodes : null;
                },
                false,
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeObject(this.description);
                    __os.writeObject(this.distrib);
                    IceGrid.StringStringDictHelper.write(__os, this.variables);
                    Ice.StringSeqHelper.write(__os, this.removeVariables);
                    IceGrid.PropertySetDescriptorDictHelper.write(__os, this.propertySets);
                    Ice.StringSeqHelper.write(__os, this.removePropertySets);
                    IceGrid.ReplicaGroupDescriptorSeqHelper.write(__os, this.replicaGroups);
                    Ice.StringSeqHelper.write(__os, this.removeReplicaGroups);
                    IceGrid.TemplateDescriptorDictHelper.write(__os, this.serverTemplates);
                    Ice.StringSeqHelper.write(__os, this.removeServerTemplates);
                    IceGrid.TemplateDescriptorDictHelper.write(__os, this.serviceTemplates);
                    Ice.StringSeqHelper.write(__os, this.removeServiceTemplates);
                    IceGrid.NodeUpdateDescriptorSeqHelper.write(__os, this.nodes);
                    Ice.StringSeqHelper.write(__os, this.removeNodes);
                },
                function(__is)
                {
                    var self = this;
                    this.name = __is.readString();
                    __is.readObject(function(__o){ self.description = __o; }, IceGrid.BoxedString);
                    __is.readObject(function(__o){ self.distrib = __o; }, IceGrid.BoxedDistributionDescriptor);
                    this.variables = IceGrid.StringStringDictHelper.read(__is);
                    this.removeVariables = Ice.StringSeqHelper.read(__is);
                    this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(__is);
                    this.removePropertySets = Ice.StringSeqHelper.read(__is);
                    this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(__is);
                    this.removeReplicaGroups = Ice.StringSeqHelper.read(__is);
                    this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(__is);
                    this.removeServerTemplates = Ice.StringSeqHelper.read(__is);
                    this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(__is);
                    this.removeServiceTemplates = Ice.StringSeqHelper.read(__is);
                    this.nodes = IceGrid.NodeUpdateDescriptorSeqHelper.read(__is);
                    this.removeNodes = Ice.StringSeqHelper.read(__is);
                },
                15, 
                false);
        
    }());

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `Exception.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * This exception is raised if an application does not exist.
             * 
             **/
            IceGrid.ApplicationNotExistException = Slice.defineUserException(
                function(name, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.name = name !== undefined ? name : "";
                },
                Ice.UserException,
                "IceGrid::ApplicationNotExistException",
                function(__os)
                {
                    __os.writeString(this.name);
                },
                function(__is)
                {
                    this.name = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if a server does not exist.
             * 
             **/
            IceGrid.ServerNotExistException = Slice.defineUserException(
                function(id, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.id = id !== undefined ? id : "";
                },
                Ice.UserException,
                "IceGrid::ServerNotExistException",
                function(__os)
                {
                    __os.writeString(this.id);
                },
                function(__is)
                {
                    this.id = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if a server failed to start.
             * 
             **/
            IceGrid.ServerStartException = Slice.defineUserException(
                function(id, reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.id = id !== undefined ? id : "";
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::ServerStartException",
                function(__os)
                {
                    __os.writeString(this.id);
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.id = __is.readString();
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if a server failed to stop.
             * 
             **/
            IceGrid.ServerStopException = Slice.defineUserException(
                function(id, reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.id = id !== undefined ? id : "";
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::ServerStopException",
                function(__os)
                {
                    __os.writeString(this.id);
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.id = __is.readString();
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if an adapter does not exist.
             * 
             **/
            IceGrid.AdapterNotExistException = Slice.defineUserException(
                function(id, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.id = id !== undefined ? id : "";
                },
                Ice.UserException,
                "IceGrid::AdapterNotExistException",
                function(__os)
                {
                    __os.writeString(this.id);
                },
                function(__is)
                {
                    this.id = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if an object already exists.
             * 
             **/
            IceGrid.ObjectExistsException = Slice.defineUserException(
                function(id, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.id = id !== undefined ? id : new Ice.Identity();
                },
                Ice.UserException,
                "IceGrid::ObjectExistsException",
                function(__os)
                {
                    Ice.Identity.write(__os, this.id);
                },
                function(__is)
                {
                    this.id = Ice.Identity.read(__is, this.id);
                },
                false,
                false);
        
            /**
             * This exception is raised if an object is not registered.
             * 
             **/
            IceGrid.ObjectNotRegisteredException = Slice.defineUserException(
                function(id, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.id = id !== undefined ? id : new Ice.Identity();
                },
                Ice.UserException,
                "IceGrid::ObjectNotRegisteredException",
                function(__os)
                {
                    Ice.Identity.write(__os, this.id);
                },
                function(__is)
                {
                    this.id = Ice.Identity.read(__is, this.id);
                },
                false,
                false);
        
            /**
             * This exception is raised if a node does not exist.
             * 
             **/
            IceGrid.NodeNotExistException = Slice.defineUserException(
                function(name, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.name = name !== undefined ? name : "";
                },
                Ice.UserException,
                "IceGrid::NodeNotExistException",
                function(__os)
                {
                    __os.writeString(this.name);
                },
                function(__is)
                {
                    this.name = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if a registry does not exist.
             * 
             **/
            IceGrid.RegistryNotExistException = Slice.defineUserException(
                function(name, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.name = name !== undefined ? name : "";
                },
                Ice.UserException,
                "IceGrid::RegistryNotExistException",
                function(__os)
                {
                    __os.writeString(this.name);
                },
                function(__is)
                {
                    this.name = __is.readString();
                },
                false,
                false);
        
            /**
             * An exception for deployment errors.
             * 
             **/
            IceGrid.DeploymentException = Slice.defineUserException(
                function(reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::DeploymentException",
                function(__os)
                {
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if a node could not be reached.
             * 
             **/
            IceGrid.NodeUnreachableException = Slice.defineUserException(
                function(name, reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.name = name !== undefined ? name : "";
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::NodeUnreachableException",
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.name = __is.readString();
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if a server could not be reached.
             * 
             **/
            IceGrid.ServerUnreachableException = Slice.defineUserException(
                function(name, reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.name = name !== undefined ? name : "";
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::ServerUnreachableException",
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.name = __is.readString();
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if a registry could not be reached.
             * 
             **/
            IceGrid.RegistryUnreachableException = Slice.defineUserException(
                function(name, reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.name = name !== undefined ? name : "";
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::RegistryUnreachableException",
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.name = __is.readString();
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if an unknown signal was sent to
             * to a server.
             * 
             **/
            IceGrid.BadSignalException = Slice.defineUserException(
                function(reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::BadSignalException",
                function(__os)
                {
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if a patch failed.
             * 
             **/
            IceGrid.PatchException = Slice.defineUserException(
                function(reasons, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.reasons = reasons !== undefined ? reasons : null;
                },
                Ice.UserException,
                "IceGrid::PatchException",
                function(__os)
                {
                    Ice.StringSeqHelper.write(__os, this.reasons);
                },
                function(__is)
                {
                    this.reasons = Ice.StringSeqHelper.read(__is);
                },
                false,
                false);
        
            /**
             * This exception is raised if a registry lock wasn't
             * acquired or is already held by a session.
             * 
             **/
            IceGrid.AccessDeniedException = Slice.defineUserException(
                function(lockUserId, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.lockUserId = lockUserId !== undefined ? lockUserId : "";
                },
                Ice.UserException,
                "IceGrid::AccessDeniedException",
                function(__os)
                {
                    __os.writeString(this.lockUserId);
                },
                function(__is)
                {
                    this.lockUserId = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if the allocation of an object failed.
             * 
             **/
            IceGrid.AllocationException = Slice.defineUserException(
                function(reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::AllocationException",
                function(__os)
                {
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if the request to allocate an object times
             * out.
             * 
             **/
            IceGrid.AllocationTimeoutException = Slice.defineUserException(
                function(reason, _cause)
                {
                    IceGrid.AllocationException.call(this, reason, _cause);
                },
                IceGrid.AllocationException,
                "IceGrid::AllocationTimeoutException",
                undefined, undefined,
                false,
                false);
        
            /**
             * This exception is raised if a client is denied the ability to create
             * a session with IceGrid.
             * 
             **/
            IceGrid.PermissionDeniedException = Slice.defineUserException(
                function(reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::PermissionDeniedException",
                function(__os)
                {
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception is raised if an observer is already registered with
             * the registry.
             * 
             * @see AdminSession#setObservers
             * @see AdminSession#setObserversByIdentity
             * 
             **/
            IceGrid.ObserverAlreadyRegisteredException = Slice.defineUserException(
                function(id, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.id = id !== undefined ? id : new Ice.Identity();
                },
                Ice.UserException,
                "IceGrid::ObserverAlreadyRegisteredException",
                function(__os)
                {
                    Ice.Identity.write(__os, this.id);
                },
                function(__is)
                {
                    this.id = Ice.Identity.read(__is, this.id);
                },
                false,
                false);
        
            /**
             * This exception is raised if a file is not available.
             * 
             * @see AdminSession#openServerStdOut
             * @see AdminSession#openServerStdErr
             * @see AdminSession#openNodeStdOut
             * @see AdminSession#openNodeStdErr
             * @see AdminSession#openRegistryStdOut
             * @see AdminSession#openRegistryStdErr
             * 
             **/
            IceGrid.FileNotAvailableException = Slice.defineUserException(
                function(reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::FileNotAvailableException",
                function(__os)
                {
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.reason = __is.readString();
                },
                false,
                false);
        
    }());

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `Admin.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * An enumeration representing the state of the server.
             * 
             **/
            IceGrid.ServerState = Slice.defineEnum([
                ['Inactive', 0], ['Activating', 1], ['ActivationTimedOut', 2], ['Active', 3], ['Deactivating', 4],
                ['Destroying', 5], ['Destroyed', 6]]);
            Slice.defineDictionary(IceGrid, "StringObjectProxyDict", "StringObjectProxyDictHelper", "Ice.StringHelper", "Ice.ObjectPrx", false, undefined, undefined);
        
            /**
             * Information about an Ice object.
             * 
             **/
            IceGrid.ObjectInfo = Slice.defineStruct(
                function(proxy, type)
                {
                    this.proxy = proxy !== undefined ? proxy : null;
                    this.type = type !== undefined ? type : "";
                },
                false,
                function(__os)
                {
                    __os.writeProxy(this.proxy);
                    __os.writeString(this.type);
                },
                function(__is)
                {
                    this.proxy = __is.readProxy();
                    this.type = __is.readString();
                },
                3, 
                false);
            Slice.defineSequence(IceGrid, "ObjectInfoSeqHelper", "IceGrid.ObjectInfo", false);
        
            /**
             * Information about an adapter registered with the IceGrid registry.
             * 
             **/
            IceGrid.AdapterInfo = Slice.defineStruct(
                function(id, proxy, replicaGroupId)
                {
                    this.id = id !== undefined ? id : "";
                    this.proxy = proxy !== undefined ? proxy : null;
                    this.replicaGroupId = replicaGroupId !== undefined ? replicaGroupId : "";
                },
                false,
                function(__os)
                {
                    __os.writeString(this.id);
                    __os.writeProxy(this.proxy);
                    __os.writeString(this.replicaGroupId);
                },
                function(__is)
                {
                    this.id = __is.readString();
                    this.proxy = __is.readProxy();
                    this.replicaGroupId = __is.readString();
                },
                4, 
                false);
            Slice.defineSequence(IceGrid, "AdapterInfoSeqHelper", "IceGrid.AdapterInfo", false);
        
            /**
             * Information about a server managed by an IceGrid node.
             * 
             **/
            IceGrid.ServerInfo = Slice.defineStruct(
                function(application, uuid, revision, node, descriptor, sessionId)
                {
                    this.application = application !== undefined ? application : "";
                    this.uuid = uuid !== undefined ? uuid : "";
                    this.revision = revision !== undefined ? revision : 0;
                    this.node = node !== undefined ? node : "";
                    this.descriptor = descriptor !== undefined ? descriptor : null;
                    this.sessionId = sessionId !== undefined ? sessionId : "";
                },
                false,
                function(__os)
                {
                    __os.writeString(this.application);
                    __os.writeString(this.uuid);
                    __os.writeInt(this.revision);
                    __os.writeString(this.node);
                    __os.writeObject(this.descriptor);
                    __os.writeString(this.sessionId);
                },
                function(__is)
                {
                    var self = this;
                    this.application = __is.readString();
                    this.uuid = __is.readString();
                    this.revision = __is.readInt();
                    this.node = __is.readString();
                    __is.readObject(function(__o){ self.descriptor = __o; }, IceGrid.ServerDescriptor);
                    this.sessionId = __is.readString();
                },
                9, 
                false);
        
            /**
             * Information about an IceGrid node.
             * 
             **/
            IceGrid.NodeInfo = Slice.defineStruct(
                function(name, os, hostname, release, version, machine, nProcessors, dataDir)
                {
                    this.name = name !== undefined ? name : "";
                    this.os = os !== undefined ? os : "";
                    this.hostname = hostname !== undefined ? hostname : "";
                    this.release = release !== undefined ? release : "";
                    this.version = version !== undefined ? version : "";
                    this.machine = machine !== undefined ? machine : "";
                    this.nProcessors = nProcessors !== undefined ? nProcessors : 0;
                    this.dataDir = dataDir !== undefined ? dataDir : "";
                },
                true,
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeString(this.os);
                    __os.writeString(this.hostname);
                    __os.writeString(this.release);
                    __os.writeString(this.version);
                    __os.writeString(this.machine);
                    __os.writeInt(this.nProcessors);
                    __os.writeString(this.dataDir);
                },
                function(__is)
                {
                    this.name = __is.readString();
                    this.os = __is.readString();
                    this.hostname = __is.readString();
                    this.release = __is.readString();
                    this.version = __is.readString();
                    this.machine = __is.readString();
                    this.nProcessors = __is.readInt();
                    this.dataDir = __is.readString();
                },
                11, 
                false);
        
            /**
             * Information about an IceGrid registry replica.
             * 
             **/
            IceGrid.RegistryInfo = Slice.defineStruct(
                function(name, hostname)
                {
                    this.name = name !== undefined ? name : "";
                    this.hostname = hostname !== undefined ? hostname : "";
                },
                true,
                function(__os)
                {
                    __os.writeString(this.name);
                    __os.writeString(this.hostname);
                },
                function(__is)
                {
                    this.name = __is.readString();
                    this.hostname = __is.readString();
                },
                2, 
                false);
            Slice.defineSequence(IceGrid, "RegistryInfoSeqHelper", "IceGrid.RegistryInfo", false);
        
            /**
             * Information about the load of a node.
             * 
             **/
            IceGrid.LoadInfo = Slice.defineStruct(
                function(avg1, avg5, avg15)
                {
                    this.avg1 = avg1 !== undefined ? avg1 : 0.0;
                    this.avg5 = avg5 !== undefined ? avg5 : 0.0;
                    this.avg15 = avg15 !== undefined ? avg15 : 0.0;
                },
                false,
                function(__os)
                {
                    __os.writeFloat(this.avg1);
                    __os.writeFloat(this.avg5);
                    __os.writeFloat(this.avg15);
                },
                function(__is)
                {
                    this.avg1 = __is.readFloat();
                    this.avg5 = __is.readFloat();
                    this.avg15 = __is.readFloat();
                },
                12, 
                true);
        
            /**
             * Information about an IceGrid application.
             * 
             **/
            IceGrid.ApplicationInfo = Slice.defineStruct(
                function(uuid, createTime, createUser, updateTime, updateUser, revision, descriptor)
                {
                    this.uuid = uuid !== undefined ? uuid : "";
                    this.createTime = createTime !== undefined ? createTime : 0;
                    this.createUser = createUser !== undefined ? createUser : "";
                    this.updateTime = updateTime !== undefined ? updateTime : 0;
                    this.updateUser = updateUser !== undefined ? updateUser : "";
                    this.revision = revision !== undefined ? revision : 0;
                    this.descriptor = descriptor !== undefined ? descriptor : new IceGrid.ApplicationDescriptor();
                },
                false,
                function(__os)
                {
                    __os.writeString(this.uuid);
                    __os.writeLong(this.createTime);
                    __os.writeString(this.createUser);
                    __os.writeLong(this.updateTime);
                    __os.writeString(this.updateUser);
                    __os.writeInt(this.revision);
                    IceGrid.ApplicationDescriptor.write(__os, this.descriptor);
                },
                function(__is)
                {
                    this.uuid = __is.readString();
                    this.createTime = __is.readLong();
                    this.createUser = __is.readString();
                    this.updateTime = __is.readLong();
                    this.updateUser = __is.readString();
                    this.revision = __is.readInt();
                    this.descriptor = IceGrid.ApplicationDescriptor.read(__is, this.descriptor);
                },
                33, 
                false);
            Slice.defineSequence(IceGrid, "ApplicationInfoSeqHelper", "IceGrid.ApplicationInfo", false);
        
            /**
             * Information about updates to an IceGrid application.
             * 
             **/
            IceGrid.ApplicationUpdateInfo = Slice.defineStruct(
                function(updateTime, updateUser, revision, descriptor)
                {
                    this.updateTime = updateTime !== undefined ? updateTime : 0;
                    this.updateUser = updateUser !== undefined ? updateUser : "";
                    this.revision = revision !== undefined ? revision : 0;
                    this.descriptor = descriptor !== undefined ? descriptor : new IceGrid.ApplicationUpdateDescriptor();
                },
                false,
                function(__os)
                {
                    __os.writeLong(this.updateTime);
                    __os.writeString(this.updateUser);
                    __os.writeInt(this.revision);
                    IceGrid.ApplicationUpdateDescriptor.write(__os, this.descriptor);
                },
                function(__is)
                {
                    this.updateTime = __is.readLong();
                    this.updateUser = __is.readString();
                    this.revision = __is.readInt();
                    this.descriptor = IceGrid.ApplicationUpdateDescriptor.read(__is, this.descriptor);
                },
                28, 
                false);
        
            /**
             * The IceGrid administrative interface. </p>
             * <p class="Warning">Allowing access to this interface
             * is a security risk! Please see the IceGrid documentation
             * for further information.
             * 
             **/
            IceGrid.Admin = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::Admin"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.AdminPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.Admin.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.Admin, IceGrid.AdminPrx,
            {
                "addApplication": [, , , , , , [[IceGrid.ApplicationDescriptor]], , 
                [
                    IceGrid.AccessDeniedException,
                    IceGrid.DeploymentException
                ], true, ],
                "syncApplication": [, , , , , , [[IceGrid.ApplicationDescriptor]], , 
                [
                    IceGrid.AccessDeniedException,
                    IceGrid.ApplicationNotExistException,
                    IceGrid.DeploymentException
                ], true, ],
                "updateApplication": [, , , , , , [[IceGrid.ApplicationUpdateDescriptor]], , 
                [
                    IceGrid.AccessDeniedException,
                    IceGrid.ApplicationNotExistException,
                    IceGrid.DeploymentException
                ], true, ],
                "syncApplicationWithoutRestart": [, , , , , , [[IceGrid.ApplicationDescriptor]], , 
                [
                    IceGrid.AccessDeniedException,
                    IceGrid.ApplicationNotExistException,
                    IceGrid.DeploymentException
                ], true, ],
                "updateApplicationWithoutRestart": [, , , , , , [[IceGrid.ApplicationUpdateDescriptor]], , 
                [
                    IceGrid.AccessDeniedException,
                    IceGrid.ApplicationNotExistException,
                    IceGrid.DeploymentException
                ], true, ],
                "removeApplication": [, , , , , , [[7]], , 
                [
                    IceGrid.AccessDeniedException,
                    IceGrid.ApplicationNotExistException,
                    IceGrid.DeploymentException
                ], , ],
                "instantiateServer": [, , , , , , [[7], [7], [IceGrid.ServerInstanceDescriptor]], , 
                [
                    IceGrid.AccessDeniedException,
                    IceGrid.ApplicationNotExistException,
                    IceGrid.DeploymentException
                ], , ],
                "patchApplication": [, , , 1, , , [[7], [1]], , 
                [
                    IceGrid.ApplicationNotExistException,
                    IceGrid.PatchException
                ], , ],
                "getApplicationInfo": [, 2, 1, , , [IceGrid.ApplicationInfo], [[7]], , 
                [
                    IceGrid.ApplicationNotExistException
                ], , true],
                "getDefaultApplicationDescriptor": [, 2, 1, , , [IceGrid.ApplicationDescriptor], , , 
                [
                    IceGrid.DeploymentException
                ], , true],
                "getAllApplicationNames": [, 2, 1, , , ["Ice.StringSeqHelper"], , , , , ],
                "getServerInfo": [, 2, 1, , , [IceGrid.ServerInfo], [[7]], , 
                [
                    IceGrid.ServerNotExistException
                ], , true],
                "getServerState": [, 2, 1, , , [IceGrid.ServerState.__helper], [[7]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException
                ], , ],
                "getServerPid": [, 2, 1, , , [3], [[7]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException
                ], , ],
                "getServerAdminCategory": [, 2, 2, , , [7], , , , , ],
                "getServerAdmin": [, 2, 2, , , [9], [[7]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException
                ], , ],
                "enableServer": [, 2, 2, , , , [[7], [1]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException
                ], , ],
                "isServerEnabled": [, 2, 1, , , [1], [[7]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException
                ], , ],
                "startServer": [, , , 1, , , [[7]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException,
                    IceGrid.ServerStartException
                ], , ],
                "stopServer": [, , , 1, , , [[7]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException,
                    IceGrid.ServerStopException
                ], , ],
                "patchServer": [, , , 1, , , [[7], [1]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.PatchException,
                    IceGrid.ServerNotExistException
                ], , ],
                "sendSignal": [, , , , , , [[7], [7]], , 
                [
                    IceGrid.BadSignalException,
                    IceGrid.DeploymentException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException
                ], , ],
                "getAllServerIds": [, 2, 1, , , ["Ice.StringSeqHelper"], , , , , ],
                "getAdapterInfo": [, 2, 1, , , ["IceGrid.AdapterInfoSeqHelper"], [[7]], , 
                [
                    IceGrid.AdapterNotExistException
                ], , ],
                "removeAdapter": [, , , , , , [[7]], , 
                [
                    IceGrid.AdapterNotExistException,
                    IceGrid.DeploymentException
                ], , ],
                "getAllAdapterIds": [, 2, 1, , , ["Ice.StringSeqHelper"], , , , , ],
                "addObject": [, , , , , , [[9]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.ObjectExistsException
                ], , ],
                "updateObject": [, , , , , , [[9]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.ObjectNotRegisteredException
                ], , ],
                "addObjectWithType": [, , , , , , [[9], [7]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.ObjectExistsException
                ], , ],
                "removeObject": [, , , , , , [[Ice.Identity]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.ObjectNotRegisteredException
                ], , ],
                "getObjectInfo": [, 2, 1, , , [IceGrid.ObjectInfo], [[Ice.Identity]], , 
                [
                    IceGrid.ObjectNotRegisteredException
                ], , ],
                "getObjectInfosByType": [, 2, 1, , , ["IceGrid.ObjectInfoSeqHelper"], [[7]], , , , ],
                "getAllObjectInfos": [, 2, 1, , , ["IceGrid.ObjectInfoSeqHelper"], [[7]], , , , ],
                "pingNode": [, 2, 1, , , [1], [[7]], , 
                [
                    IceGrid.NodeNotExistException
                ], , ],
                "getNodeLoad": [, 2, 1, , , [IceGrid.LoadInfo], [[7]], , 
                [
                    IceGrid.NodeNotExistException,
                    IceGrid.NodeUnreachableException
                ], , ],
                "getNodeInfo": [, 2, 1, , , [IceGrid.NodeInfo], [[7]], , 
                [
                    IceGrid.NodeNotExistException,
                    IceGrid.NodeUnreachableException
                ], , ],
                "getNodeAdmin": [, 2, 2, , , [9], [[7]], , 
                [
                    IceGrid.NodeNotExistException,
                    IceGrid.NodeUnreachableException
                ], , ],
                "getNodeProcessorSocketCount": [, 2, 1, , , [3], [[7]], , 
                [
                    IceGrid.NodeNotExistException,
                    IceGrid.NodeUnreachableException
                ], , ],
                "shutdownNode": [, , , , , , [[7]], , 
                [
                    IceGrid.NodeNotExistException,
                    IceGrid.NodeUnreachableException
                ], , ],
                "getNodeHostname": [, 2, 1, , , [7], [[7]], , 
                [
                    IceGrid.NodeNotExistException,
                    IceGrid.NodeUnreachableException
                ], , ],
                "getAllNodeNames": [, 2, 1, , , ["Ice.StringSeqHelper"], , , , , ],
                "pingRegistry": [, 2, 2, , , [1], [[7]], , 
                [
                    IceGrid.RegistryNotExistException
                ], , ],
                "getRegistryInfo": [, 2, 2, , , [IceGrid.RegistryInfo], [[7]], , 
                [
                    IceGrid.RegistryNotExistException,
                    IceGrid.RegistryUnreachableException
                ], , ],
                "getRegistryAdmin": [, 2, 2, , , [9], [[7]], , 
                [
                    IceGrid.RegistryNotExistException
                ], , ],
                "shutdownRegistry": [, 2, 2, , , , [[7]], , 
                [
                    IceGrid.RegistryNotExistException,
                    IceGrid.RegistryUnreachableException
                ], , ],
                "getAllRegistryNames": [, 2, 2, , , ["Ice.StringSeqHelper"], , , , , ],
                "shutdown": [, , , , , , , , , , ],
                "getSliceChecksums": [, 2, 1, , , ["Ice.SliceChecksumDictHelper"], , , , , ]
            });
        
            /**
             * This interface provides access to IceGrid log file contents.
             * 
             **/
            IceGrid.FileIterator = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::FileIterator"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.FileIteratorPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.FileIterator.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.FileIterator, IceGrid.FileIteratorPrx,
            {
                "read": [, , , , , [1], [[3]], [["Ice.StringSeqHelper"]], 
                [
                    IceGrid.FileNotAvailableException
                ], , ],
                "destroy": [, , , , , , , , , , ]
            });
        
            /**
             * Used by administrative clients to view,
             * update, and receive observer updates from the IceGrid
             * registry. Admin sessions are created either with the {@link Registry}
             * object or the registry admin {@link Glacier2.SessionManager} object.
             * 
             * @see Registry
             * @see Glacier2.SessionManager
             * 
             **/
            IceGrid.AdminSession = Slice.defineObject(
                undefined,
                Ice.Object,
                [
                    Glacier2.Session
                ], 2,
                [
                    "::Glacier2::Session",
                    "::Ice::Object",
                    "::IceGrid::AdminSession"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.AdminSessionPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.AdminSession.ice_staticId, [
                Glacier2.SessionPrx]);
        
            Slice.defineOperations(IceGrid.AdminSession, IceGrid.AdminSessionPrx,
            {
                "keepAlive": [, 2, 2, , , , , , , , ],
                "getAdmin": [, 2, 1, , , ["IceGrid.AdminPrx"], , , , , ],
                "getAdminCallbackTemplate": [, 2, 2, , , [9], , , , , ],
                "setObservers": [, 2, 2, , , , [["IceGrid.RegistryObserverPrx"], ["IceGrid.NodeObserverPrx"], ["IceGrid.ApplicationObserverPrx"], ["IceGrid.AdapterObserverPrx"], ["IceGrid.ObjectObserverPrx"]], , 
                [
                    IceGrid.ObserverAlreadyRegisteredException
                ], , ],
                "setObserversByIdentity": [, 2, 2, , , , [[Ice.Identity], [Ice.Identity], [Ice.Identity], [Ice.Identity], [Ice.Identity]], , 
                [
                    IceGrid.ObserverAlreadyRegisteredException
                ], , ],
                "startUpdate": [, , , , , [3], , , 
                [
                    IceGrid.AccessDeniedException
                ], , ],
                "finishUpdate": [, , , , , , , , 
                [
                    IceGrid.AccessDeniedException
                ], , ],
                "getReplicaName": [, 2, 2, , , [7], , , , , ],
                "openServerLog": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [7], [3]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.FileNotAvailableException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException
                ], , ],
                "openServerStdErr": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.FileNotAvailableException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException
                ], , ],
                "openServerStdOut": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
                [
                    IceGrid.DeploymentException,
                    IceGrid.FileNotAvailableException,
                    IceGrid.NodeUnreachableException,
                    IceGrid.ServerNotExistException
                ], , ],
                "openNodeStdErr": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
                [
                    IceGrid.FileNotAvailableException,
                    IceGrid.NodeNotExistException,
                    IceGrid.NodeUnreachableException
                ], , ],
                "openNodeStdOut": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
                [
                    IceGrid.FileNotAvailableException,
                    IceGrid.NodeNotExistException,
                    IceGrid.NodeUnreachableException
                ], , ],
                "openRegistryStdErr": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
                [
                    IceGrid.FileNotAvailableException,
                    IceGrid.RegistryNotExistException,
                    IceGrid.RegistryUnreachableException
                ], , ],
                "openRegistryStdOut": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
                [
                    IceGrid.FileNotAvailableException,
                    IceGrid.RegistryNotExistException,
                    IceGrid.RegistryUnreachableException
                ], , ]
            });
        
    }());

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `FileParser.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * This exception is raised if an error occurs during parsing.
             * 
             **/
            IceGrid.ParseException = Slice.defineUserException(
                function(reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceGrid::ParseException",
                function(__os)
                {
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * <tt>icegridadmin</tt> provides a {@link FileParser}
             * object to transform XML files into {@link ApplicationDescriptor}
             * objects.
             * 
             **/
            IceGrid.FileParser = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::FileParser"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.FileParserPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.FileParser.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.FileParser, IceGrid.FileParserPrx,
            {
                "parse": [, 2, 2, , , [IceGrid.ApplicationDescriptor], [[7], ["IceGrid.AdminPrx"]], , 
                [
                    IceGrid.ParseException
                ], , true]
            });
        
    }());

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `Locator.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * The IceGrid locator interface provides access to the {@link Query}
             * and {@link Registry} object of the IceGrid registry.
             * 
             * @see Query
             * @see Registry
             * 
             **/
            IceGrid.Locator = Slice.defineObject(
                undefined,
                Ice.Object,
                [
                    Ice.Locator
                ], 2,
                [
                    "::Ice::Locator",
                    "::Ice::Object",
                    "::IceGrid::Locator"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.LocatorPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.Locator.ice_staticId, [
                Ice.LocatorPrx]);
        
            Slice.defineOperations(IceGrid.Locator, IceGrid.LocatorPrx,
            {
                "getLocalRegistry": [, 2, 2, , , ["IceGrid.RegistryPrx"], , , , , ],
                "getLocalQuery": [, 2, 2, , , ["IceGrid.QueryPrx"], , , , , ]
            });
        
    }());

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `Observer.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * Dynamic information about the state of a server.
             * 
             **/
            IceGrid.ServerDynamicInfo = Slice.defineStruct(
                function(id, state, pid, enabled)
                {
                    this.id = id !== undefined ? id : "";
                    this.state = state !== undefined ? state : IceGrid.ServerState.Inactive;
                    this.pid = pid !== undefined ? pid : 0;
                    this.enabled = enabled !== undefined ? enabled : false;
                },
                true,
                function(__os)
                {
                    __os.writeString(this.id);
                    IceGrid.ServerState.__write(__os, this.state);
                    __os.writeInt(this.pid);
                    __os.writeBool(this.enabled);
                },
                function(__is)
                {
                    this.id = __is.readString();
                    this.state = IceGrid.ServerState.__read(__is);
                    this.pid = __is.readInt();
                    this.enabled = __is.readBool();
                },
                7, 
                false);
            Slice.defineSequence(IceGrid, "ServerDynamicInfoSeqHelper", "IceGrid.ServerDynamicInfo", false);
        
            /**
             * Dynamic information about the state of an adapter.
             * 
             **/
            IceGrid.AdapterDynamicInfo = Slice.defineStruct(
                function(id, proxy)
                {
                    this.id = id !== undefined ? id : "";
                    this.proxy = proxy !== undefined ? proxy : null;
                },
                false,
                function(__os)
                {
                    __os.writeString(this.id);
                    __os.writeProxy(this.proxy);
                },
                function(__is)
                {
                    this.id = __is.readString();
                    this.proxy = __is.readProxy();
                },
                3, 
                false);
            Slice.defineSequence(IceGrid, "AdapterDynamicInfoSeqHelper", "IceGrid.AdapterDynamicInfo", false);
        
            /**
             * Dynamic information about the state of a node.
             * 
             **/
            IceGrid.NodeDynamicInfo = Slice.defineStruct(
                function(info, servers, adapters)
                {
                    this.info = info !== undefined ? info : new IceGrid.NodeInfo();
                    this.servers = servers !== undefined ? servers : null;
                    this.adapters = adapters !== undefined ? adapters : null;
                },
                false,
                function(__os)
                {
                    IceGrid.NodeInfo.write(__os, this.info);
                    IceGrid.ServerDynamicInfoSeqHelper.write(__os, this.servers);
                    IceGrid.AdapterDynamicInfoSeqHelper.write(__os, this.adapters);
                },
                function(__is)
                {
                    this.info = IceGrid.NodeInfo.read(__is, this.info);
                    this.servers = IceGrid.ServerDynamicInfoSeqHelper.read(__is);
                    this.adapters = IceGrid.AdapterDynamicInfoSeqHelper.read(__is);
                },
                13, 
                false);
            Slice.defineSequence(IceGrid, "NodeDynamicInfoSeqHelper", "IceGrid.NodeDynamicInfo", false);
        
            /**
             * The node observer interface. Observers should implement this
             * interface to receive information about the state of the IceGrid
             * nodes.
             * 
             **/
            IceGrid.NodeObserver = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::NodeObserver"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.NodeObserverPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.NodeObserver.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.NodeObserver, IceGrid.NodeObserverPrx,
            {
                "nodeInit": [, , , , , , [["IceGrid.NodeDynamicInfoSeqHelper"]], , , , ],
                "nodeUp": [, , , , , , [[IceGrid.NodeDynamicInfo]], , , , ],
                "nodeDown": [, , , , , , [[7]], , , , ],
                "updateServer": [, , , , , , [[7], [IceGrid.ServerDynamicInfo]], , , , ],
                "updateAdapter": [, , , , , , [[7], [IceGrid.AdapterDynamicInfo]], , , , ]
            });
        
            /**
             * The database observer interface. Observers should implement this
             * interface to receive information about the state of the IceGrid
             * registry database.
             * 
             **/
            IceGrid.ApplicationObserver = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::ApplicationObserver"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.ApplicationObserverPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.ApplicationObserver.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.ApplicationObserver, IceGrid.ApplicationObserverPrx,
            {
                "applicationInit": [, , , , , , [[3], ["IceGrid.ApplicationInfoSeqHelper"]], , , true, ],
                "applicationAdded": [, , , , , , [[3], [IceGrid.ApplicationInfo]], , , true, ],
                "applicationRemoved": [, , , , , , [[3], [7]], , , , ],
                "applicationUpdated": [, , , , , , [[3], [IceGrid.ApplicationUpdateInfo]], , , true, ]
            });
        
            /**
             * This interface allows applications to monitor the state of object
             * adapters that are registered with IceGrid.
             * 
             **/
            IceGrid.AdapterObserver = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::AdapterObserver"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.AdapterObserverPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.AdapterObserver.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.AdapterObserver, IceGrid.AdapterObserverPrx,
            {
                "adapterInit": [, , , , , , [["IceGrid.AdapterInfoSeqHelper"]], , , , ],
                "adapterAdded": [, , , , , , [[IceGrid.AdapterInfo]], , , , ],
                "adapterUpdated": [, , , , , , [[IceGrid.AdapterInfo]], , , , ],
                "adapterRemoved": [, , , , , , [[7]], , , , ]
            });
        
            /**
             * This interface allows applications to monitor IceGrid well-known objects.
             * 
             **/
            IceGrid.ObjectObserver = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::ObjectObserver"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.ObjectObserverPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.ObjectObserver.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.ObjectObserver, IceGrid.ObjectObserverPrx,
            {
                "objectInit": [, , , , , , [["IceGrid.ObjectInfoSeqHelper"]], , , , ],
                "objectAdded": [, , , , , , [[IceGrid.ObjectInfo]], , , , ],
                "objectUpdated": [, , , , , , [[IceGrid.ObjectInfo]], , , , ],
                "objectRemoved": [, , , , , , [[Ice.Identity]], , , , ]
            });
        
            /**
             * This interface allows applications to monitor changes the state
             * of the registry.
             * 
             **/
            IceGrid.RegistryObserver = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::RegistryObserver"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.RegistryObserverPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.RegistryObserver.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.RegistryObserver, IceGrid.RegistryObserverPrx,
            {
                "registryInit": [, , , , , , [["IceGrid.RegistryInfoSeqHelper"]], , , , ],
                "registryUp": [, , , , , , [[IceGrid.RegistryInfo]], , , , ],
                "registryDown": [, , , , , , [[7]], , , , ]
            });
        
    }());

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `Query.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * Determines which load sampling interval to use.
             * 
             **/
            IceGrid.LoadSample = Slice.defineEnum([
                ['LoadSample1', 0], ['LoadSample5', 1], ['LoadSample15', 2]]);
        
            /**
             * The IceGrid query interface. This interface is accessible to
             * Ice clients who wish to look up well-known objects.
             * 
             **/
            IceGrid.Query = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::Query"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.QueryPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.Query.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.Query, IceGrid.QueryPrx,
            {
                "findObjectById": [, 2, 1, , , [9], [[Ice.Identity]], , , , ],
                "findObjectByType": [, 2, 1, , , [9], [[7]], , , , ],
                "findObjectByTypeOnLeastLoadedNode": [, 2, 1, , , [9], [[7], [IceGrid.LoadSample.__helper]], , , , ],
                "findAllObjectsByType": [, 2, 1, , , ["Ice.ObjectProxySeqHelper"], [[7]], , , , ],
                "findAllReplicas": [, 2, 2, , , ["Ice.ObjectProxySeqHelper"], [[9]], , , , ]
            });
        
    }());

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `Session.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * A session object is used by IceGrid clients to allocate and
             * release objects. Client sessions are either created with the
             * {@link Registry} object or the registry client {@link Glacier2.SessionManager}
             * object.
             * 
             * @see Registry
             * @see Glacier2.SessionManager
             * 
             **/
            IceGrid.Session = Slice.defineObject(
                undefined,
                Ice.Object,
                [
                    Glacier2.Session
                ], 2,
                [
                    "::Glacier2::Session",
                    "::Ice::Object",
                    "::IceGrid::Session"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.SessionPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.Session.ice_staticId, [
                Glacier2.SessionPrx]);
        
            Slice.defineOperations(IceGrid.Session, IceGrid.SessionPrx,
            {
                "keepAlive": [, 2, 2, , , , , , , , ],
                "allocateObjectById": [, , , 1, , [9], [[Ice.Identity]], , 
                [
                    IceGrid.AllocationException,
                    IceGrid.ObjectNotRegisteredException
                ], , ],
                "allocateObjectByType": [, , , 1, , [9], [[7]], , 
                [
                    IceGrid.AllocationException
                ], , ],
                "releaseObject": [, , , , , , [[Ice.Identity]], , 
                [
                    IceGrid.AllocationException,
                    IceGrid.ObjectNotRegisteredException
                ], , ],
                "setAllocationTimeout": [, 2, 2, , , , [[3]], , , , ]
            });
        
    }());

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `Registry.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * The IceGrid registry allows clients create sessions
             * directly with the registry.
             * 
             * @see Session
             * @see AdminSession
             * 
             **/
            IceGrid.Registry = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::Registry"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.RegistryPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.Registry.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.Registry, IceGrid.RegistryPrx,
            {
                "createSession": [, , , , , ["IceGrid.SessionPrx"], [[7], [7]], , 
                [
                    IceGrid.PermissionDeniedException
                ], , ],
                "createAdminSession": [, , , , , ["IceGrid.AdminSessionPrx"], [[7], [7]], , 
                [
                    IceGrid.PermissionDeniedException
                ], , ],
                "createSessionFromSecureConnection": [, , , , , ["IceGrid.SessionPrx"], , , 
                [
                    IceGrid.PermissionDeniedException
                ], , ],
                "createAdminSessionFromSecureConnection": [, , , , , ["IceGrid.AdminSessionPrx"], , , 
                [
                    IceGrid.PermissionDeniedException
                ], , ],
                "getSessionTimeout": [, 2, 1, , , [3], , , , , ],
                "getACMTimeout": [, 2, 1, , , [3], , , , , ]
            });
        
    }());

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `UserAccountMapper.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * This exception is raised if a user account for a given session
             * identifier can't be found.
             * 
             **/
            IceGrid.UserAccountNotFoundException = Slice.defineUserException(
                function(_cause)
                {
                    Ice.UserException.call(this, _cause);
                },
                Ice.UserException,
                "IceGrid::UserAccountNotFoundException",
                undefined, undefined,
                false,
                false);
        
            /**
             * A user account mapper object is used by IceGrid nodes to map
             * session identifiers to user accounts.
             * 
             **/
            IceGrid.UserAccountMapper = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceGrid::UserAccountMapper"
                ],
                -1, undefined, undefined, false);
        
            IceGrid.UserAccountMapperPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.UserAccountMapper.ice_staticId, undefined);
        
            Slice.defineOperations(IceGrid.UserAccountMapper, IceGrid.UserAccountMapperPrx,
            {
                "getUserAccount": [, , , , , [7], [[7]], , 
                [
                    IceGrid.UserAccountNotFoundException
                ], , ]
            });
        
    }());

    __root.IceGrid = IceGrid;
}());

