(function()
{
    var __root = typeof(window) !== "undefined" ? window : self;
    __root.IceStorm = __root.IceStorm || {};
    var Slice = Ice.Slice;

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `Metrics.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * Provides information on IceStorm topics.
             * 
             **/
            IceMX.TopicMetrics = Slice.defineObject(
                function(id, total, current, totalLifetime, failures, published, forwarded)
                {
                    IceMX.Metrics.call(this, id, total, current, totalLifetime, failures);
                    this.published = published !== undefined ? published : new Ice.Long(0, 0);
                    this.forwarded = forwarded !== undefined ? forwarded : new Ice.Long(0, 0);
                },
                IceMX.Metrics, undefined, 2,
                [
                    "::Ice::Object",
                    "::IceMX::Metrics",
                    "::IceMX::TopicMetrics"
                ],
                -1,
                function(__os)
                {
                    __os.writeLong(this.published);
                    __os.writeLong(this.forwarded);
                },
                function(__is)
                {
                    this.published = __is.readLong();
                    this.forwarded = __is.readLong();
                },
                false);
        
            IceMX.TopicMetricsPrx = Slice.defineProxy(IceMX.MetricsPrx, IceMX.TopicMetrics.ice_staticId, undefined);
        
            Slice.defineOperations(IceMX.TopicMetrics, IceMX.TopicMetricsPrx);
        
            /**
             * Provides information on IceStorm subscribers.
             * 
             **/
            IceMX.SubscriberMetrics = Slice.defineObject(
                function(id, total, current, totalLifetime, failures, queued, outstanding, delivered)
                {
                    IceMX.Metrics.call(this, id, total, current, totalLifetime, failures);
                    this.queued = queued !== undefined ? queued : 0;
                    this.outstanding = outstanding !== undefined ? outstanding : 0;
                    this.delivered = delivered !== undefined ? delivered : new Ice.Long(0, 0);
                },
                IceMX.Metrics, undefined, 2,
                [
                    "::Ice::Object",
                    "::IceMX::Metrics",
                    "::IceMX::SubscriberMetrics"
                ],
                -1,
                function(__os)
                {
                    __os.writeInt(this.queued);
                    __os.writeInt(this.outstanding);
                    __os.writeLong(this.delivered);
                },
                function(__is)
                {
                    this.queued = __is.readInt();
                    this.outstanding = __is.readInt();
                    this.delivered = __is.readLong();
                },
                false);
        
            IceMX.SubscriberMetricsPrx = Slice.defineProxy(IceMX.MetricsPrx, IceMX.SubscriberMetrics.ice_staticId, undefined);
        
            Slice.defineOperations(IceMX.SubscriberMetrics, IceMX.SubscriberMetricsPrx);
        
    }());

    (function()
    {
        // **********************************************************************
        //
        // Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
        //
        // This copy of Ice is licensed to you under the terms described in the
        // ICE_LICENSE file included in this distribution.
        //
        // **********************************************************************
        //
        // Ice version 3.6.2
        //
        // <auto-generated>
        //
        // Generated from file `IceStorm.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        
            /**
             * Information on the topic links.
             * 
             **/
            IceStorm.LinkInfo = Slice.defineStruct(
                function(theTopic, name, cost)
                {
                    this.theTopic = theTopic !== undefined ? theTopic : null;
                    this.name = name !== undefined ? name : "";
                    this.cost = cost !== undefined ? cost : 0;
                },
                false,
                function(__os)
                {
                    IceStorm.TopicPrx.write(__os, this.theTopic);
                    __os.writeString(this.name);
                    __os.writeInt(this.cost);
                },
                function(__is)
                {
                    this.theTopic = IceStorm.TopicPrx.read(__is, this.theTopic);
                    this.name = __is.readString();
                    this.cost = __is.readInt();
                },
                7, 
                false);
            Slice.defineSequence(IceStorm, "LinkInfoSeqHelper", "IceStorm.LinkInfo", false);
            Slice.defineDictionary(IceStorm, "QoS", "QoSHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);
        
            /**
             * This exception indicates that an attempt was made to create a link
             * that already exists.
             * 
             **/
            IceStorm.LinkExists = Slice.defineUserException(
                function(name, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.name = name !== undefined ? name : "";
                },
                Ice.UserException,
                "IceStorm::LinkExists",
                function(__os)
                {
                    __os.writeString(this.name);
                },
                function(__is)
                {
                    this.name = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception indicates that an attempt was made to remove a
             * link that does not exist.
             * 
             **/
            IceStorm.NoSuchLink = Slice.defineUserException(
                function(name, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.name = name !== undefined ? name : "";
                },
                Ice.UserException,
                "IceStorm::NoSuchLink",
                function(__os)
                {
                    __os.writeString(this.name);
                },
                function(__is)
                {
                    this.name = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception indicates that an attempt was made to subscribe
             * a proxy for which a subscription already exists.
             * 
             **/
            IceStorm.AlreadySubscribed = Slice.defineUserException(
                function(_cause)
                {
                    Ice.UserException.call(this, _cause);
                },
                Ice.UserException,
                "IceStorm::AlreadySubscribed",
                undefined, undefined,
                false,
                false);
        
            /**
             * This exception indicates that an attempt was made to subscribe
             * a proxy that is null.
             * 
             **/
            IceStorm.InvalidSubscriber = Slice.defineUserException(
                function(reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceStorm::InvalidSubscriber",
                function(__os)
                {
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception indicates that a subscription failed due to an
             * invalid QoS.
             * 
             **/
            IceStorm.BadQoS = Slice.defineUserException(
                function(reason, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.reason = reason !== undefined ? reason : "";
                },
                Ice.UserException,
                "IceStorm::BadQoS",
                function(__os)
                {
                    __os.writeString(this.reason);
                },
                function(__is)
                {
                    this.reason = __is.readString();
                },
                false,
                false);
        
            /**
             * Publishers publish information on a particular topic. A topic
             * logically represents a type.
             * 
             * @see TopicManager
             * 
             **/
            IceStorm.Topic = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceStorm::Topic"
                ],
                -1, undefined, undefined, false);
        
            IceStorm.TopicPrx = Slice.defineProxy(Ice.ObjectPrx, IceStorm.Topic.ice_staticId, undefined);
        
            Slice.defineOperations(IceStorm.Topic, IceStorm.TopicPrx,
            {
                "getName": [, 2, 1, , , [7], , , , , ],
                "getPublisher": [, 2, 1, , , [9], , , , , ],
                "getNonReplicatedPublisher": [, 2, 1, , , [9], , , , , ],
                "subscribeAndGetPublisher": [, , , , , [9], [["IceStorm.QoSHelper"], [9]], , 
                [
                    IceStorm.AlreadySubscribed,
                    IceStorm.BadQoS,
                    IceStorm.InvalidSubscriber
                ], , ],
                "unsubscribe": [, 2, 2, , , , [[9]], , , , ],
                "link": [, , , , , , [["IceStorm.TopicPrx"], [3]], , 
                [
                    IceStorm.LinkExists
                ], , ],
                "unlink": [, , , , , , [["IceStorm.TopicPrx"]], , 
                [
                    IceStorm.NoSuchLink
                ], , ],
                "getLinkInfoSeq": [, 2, 1, , , ["IceStorm.LinkInfoSeqHelper"], , , , , ],
                "getSubscribers": [, , , , , ["Ice.IdentitySeqHelper"], , , , , ],
                "destroy": [, , , , , , , , , , ]
            });
            Slice.defineDictionary(IceStorm, "TopicDict", "TopicDictHelper", "Ice.StringHelper", "IceStorm.TopicPrx", false, undefined, undefined, Ice.HashMap.compareEquals);
        
            /**
             * This exception indicates that an attempt was made to create a topic
             * that already exists.
             * 
             **/
            IceStorm.TopicExists = Slice.defineUserException(
                function(name, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.name = name !== undefined ? name : "";
                },
                Ice.UserException,
                "IceStorm::TopicExists",
                function(__os)
                {
                    __os.writeString(this.name);
                },
                function(__is)
                {
                    this.name = __is.readString();
                },
                false,
                false);
        
            /**
             * This exception indicates that an attempt was made to retrieve a
             * topic that does not exist.
             * 
             **/
            IceStorm.NoSuchTopic = Slice.defineUserException(
                function(name, _cause)
                {
                    Ice.UserException.call(this, _cause);
                    this.name = name !== undefined ? name : "";
                },
                Ice.UserException,
                "IceStorm::NoSuchTopic",
                function(__os)
                {
                    __os.writeString(this.name);
                },
                function(__is)
                {
                    this.name = __is.readString();
                },
                false,
                false);
        
            /**
             * A topic manager manages topics, and subscribers to topics.
             * 
             * @see Topic
             * 
             **/
            IceStorm.TopicManager = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceStorm::TopicManager"
                ],
                -1, undefined, undefined, false);
        
            IceStorm.TopicManagerPrx = Slice.defineProxy(Ice.ObjectPrx, IceStorm.TopicManager.ice_staticId, undefined);
        
            Slice.defineOperations(IceStorm.TopicManager, IceStorm.TopicManagerPrx,
            {
                "create": [, , , , , ["IceStorm.TopicPrx"], [[7]], , 
                [
                    IceStorm.TopicExists
                ], , ],
                "retrieve": [, 2, 1, , , ["IceStorm.TopicPrx"], [[7]], , 
                [
                    IceStorm.NoSuchTopic
                ], , ],
                "retrieveAll": [, 2, 1, , , ["IceStorm.TopicDictHelper"], , , , , ],
                "getSliceChecksums": [, 2, 1, , , ["Ice.SliceChecksumDictHelper"], , , , , ]
            });
        
            /**
             * This inferface is advertised by the IceStorm service through the
             * Ice object with the identity `IceStorm/Finder'. This allows clients
             * to retrieve the topic manager with just the endpoint information of
             * the IceStorm service.
             * 
             **/
            IceStorm.Finder = Slice.defineObject(
                undefined,
                Ice.Object, undefined, 1,
                [
                    "::Ice::Object",
                    "::IceStorm::Finder"
                ],
                -1, undefined, undefined, false);
        
            IceStorm.FinderPrx = Slice.defineProxy(Ice.ObjectPrx, IceStorm.Finder.ice_staticId, undefined);
        
            Slice.defineOperations(IceStorm.Finder, IceStorm.FinderPrx,
            {
                "getTopicManager": [, , , , , ["IceStorm.TopicManagerPrx"], , , , , ]
            });
        
    }());

    __root.IceStorm = IceStorm;
}());

